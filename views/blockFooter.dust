
</div><!-- .global_wrapper -->

<footer id="footer" class="spanAll" style="display:none">
    <div>
        <h1></h1>         
        <p></p>
    </div>
</footer>

<script src="{p.js}/core.js"></script>
<script src="{p.js}/custcore.js"></script>
<script src="{p.js}/fancybox/source/jquery.fancybox.js"></script>
<script src="{p.js}/placeholderpolyfill/placeholder_polyfill.jquery.min.combo.js" charset="utf-8"></script>

{?gJSON.userHeaders.ua.isLoadEmoji}
<!-- Emoji Polyfill -->
<script src="//cdn.jsdelivr.net/emojione/1.2.4/lib/js/emojione.min.js"></script>
<script>
function convertEmoji() {
   $(".convert-emoji").each(function() {
       var original = $(this).html();
       // use .shortnameToImage if only converting shortnames (for slightly better performance)
       var converted = emojione.toImage(original);
       $(this).html(converted);
   }); 
}
$(function() { convertEmoji(); });
$(window).load(function() { convertEmoji(); });
</script>
{/gJSON.userHeaders.ua.isLoadEmoji}


<!-- Inititializers -->
<script>
function buttonsInitStack() {
    likeButton.init($('.likeButton')); 
    sendComment();
    settingsButton();
}
$(function() { buttonsInitStack(); });
</script>

<!-- sendComment button -->
<script>
function sendComment() {
    $('.sendComment').unbind('click.vv').on('click.vv', function() {
        var postId = $(this).attr('data-pid'),
            postOwnerId = $(this).attr('data-uid'),
            $thisBlock = $(this).closest('article'),
            $commentInput = $thisBlock.find('.postCommentInput'),
            comment = $commentInput.val(),
            $commentButton = $thisBlock.find('.sendComment');

        if(comment.length === 0 ) { return false; }
        
        //prevent spam commenting.
        $commentButton.attr('disabled', 'disabled');
        setTimeout(function() {
            $commentButton.removeAttr('disabled');
        }, 3000);

        if(comment.length > 500) {
            return alertFactory.protoAlert('Oops... your comment is too long. Please shorten to below 500.');
        }
        // AJAX post
        var posting = $.post( "{p.absPath}/api/comment", { postId: postId, postOwnerId: postOwnerId, comment: comment } );

        //prepare the comment
        var commentJSON = {
            comment: comment,
            commentId: Date.now(),
            user: {
                profilePicture: printHead.userHeaders.profilePicture,
                userNameDisp: printHead.userHeaders.userNameDisp
            }
        }
        var $submittedComment = streamFactory.append.eachComment($thisBlock, commentJSON, true, null, true);

        $submittedComment.velocity('transition.slideDownIn');

        $commentInput.velocity('callout.flashShort');
        //flashShort is 400ms. At 200ms, clear the comment text.
        setTimeout(function() { 
            $commentInput.val('');
        }, 200);
        $commentButton.velocity('callout.flashShort');

        //done
        posting.done(function( data ) {
            console.log(data);
            if(data.success) {
                console.log('comment added');
            } else {
                console.log('error');
                $submittedComment.remove();
                alertFactory.commentError();
            }  
        });
        //fail
        posting.fail(function() {
                alertFactory.commentError();
        });
    });
}
</script>

<!-- Like Button -->
<script>
var likeButton = {
    main: function($el) {

        var postId = $el.attr('data-pid'),
            postOwnerId = $el.attr('data-uid'),
            action = $el.attr('data-action'),
            $likeButton = $el;

        //disable the button
        $likeButton.unbind('click.vv');
        setTimeout(function() {
            likeButton.init($el);
        }, 1000);

        //change the state
        function changeState() {
            if(action === 'like') {
                $likeButton.velocity('callout.pulse', 200);
                $likeButton.attr('data-action','unlike');
            } else {
                $likeButton.attr('data-action','like');
            }
        }
        changeState();


        // Send the data using post
        var posting = $.post( "{p.absPath}/api/like", { 
            postId: postId, 
            postOwnerId: postOwnerId, 
            action: action 
        });
        
        //done
        posting.done(function( data ) {
            console.log(data);
        });

        //fail
        posting.fail(function() {
            changeState();
            alertFactory.protoAlert('Please either login or check your internet connection.');
        });
    },
    init: function($el) {
        var self = this;
        $el.unbind('click.vv');
        $el.on('click.vv', function() {
            self.main($(this));
        });
    }
}
</script>

<script>
function settingsButton() {
    var $settingsBut = $('.settingsButton'),
        $postDelete = $('.settingsDelete'),
        $postMark = $('.settingsMark');

    $settingsBut.unbind('click.vv').bind('click.vv', function() {
        var pid = $(this).attr('data-pid'),

            isActive = $(this).hasClass('settingActive');

        if(isActive) {
            $(this).parent().find('.blockInteractSettingsWrap').hide();
            $(this).removeClass('settingActive');
        } else {
            hideAllTabs();
            $(this).parent().find('.blockInteractSettingsWrap').show();
            $(this).addClass('settingActive');
        }
    });

    $postDelete.unbind('click.vv').bind('click.vv', function() {

        hideAllTabs();
        var msg = Object.create(aF);

        var pid = $(this).attr('data-pid');
        var isProfilePicture = $(this).attr('data-isprofile');

        var text  = '<h1 style="color:#ccc;text-align:center;">Are you sure?</h1>';
            text += '<h2 style="text-align:center;"><span class="clickable" onclick="VV.utils.deletePostAjax(' + pid + ', ' + isProfilePicture + ')">Yes</span>';
            text += '&nbsp;|&nbsp;<span class="clickable" onclick="$.fancybox.close()"> No</span></h2>';

        if(isProfilePicture) {
            text +='<p style="color:#ccc; text-align:center;">Note: This is your profile picture. ';
            text += 'Your latest post will be automatically set as your new profile picture.</p>';
        }

        return msg.protoAlert({
            title: "Delete Post",
            text: text
        });
    });

    $(document).unbind('click.settings').on('click.settings', function(e) {
        var target = e.target;
        if ( !$(target).is('.settingsButton') && !$(target).parents().is('.settingsButton') && !$(target).is('.settingsMark') ) {
            hideAllTabs();
        }
    });

    $postMark.unbind('click.vv').bind('click', function() {
        $(this).parent().velocity('callout.pulse', 400, function() {
            hideAllTabs();
        });

        var data = {
            pid: $(this).attr('data-pid'),
            uid: $(this).attr('data-uid')
        }
        var markAjax = $.post(printHead.p.absPath + '/api/post/mark', data);
    });

    function hideAllTabs() {
        $('.blockInteractSettingsWrap').hide();
        $settingsBut.removeClass('settingActive');
    }
}
</script>

<script>
//jQuery validation needs to complete loading before we re-enable the buttons
//Else, once after the DOM is completed, but before validation is applied, user
//is able to submit the form and get erroneous behaviours.
$('button[type="submit"]').each(function(i, el){
    var $e = $(el);
    if($e.hasClass('permaDisable')) { return false;}
    $e.removeAttr('disabled');
});
</script>

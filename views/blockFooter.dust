
</div><!-- .global_wrapper -->

<footer id="footer" class="spanAll" style="display:none">
    <div>
        <h1></h1>         
        <p></p>
    </div>
</footer>

<script src="{p.js}/core.js"></script>
<script src="{p.js}/custcore.js"></script>
<script src="{p.js}/fancybox/source/jquery.fancybox.js"></script>
<script src="{p.js}/placeholderpolyfill/placeholder_polyfill.jquery.min.combo.js" charset="utf-8"></script>
<script src="{p.js}/jtags/jquery.hashtags.modified.js"></script>

{?gJSON.userHeaders.ua.isLoadEmoji}
<!-- Emoji Polyfill -->
<script src="//cdn.jsdelivr.net/emojione/1.2.4/lib/js/emojione.min.js"></script>
<script>
function convertEmoji() {
   $(".convert-emoji").each(function() {
       var original = $(this).html();
       // use .shortnameToImage if only converting shortnames (for slightly better performance)
       var converted = emojione.toImage(original);
       $(this).html(converted);
   }); 
}
$(function() { convertEmoji(); });
$(window).load(function() { convertEmoji(); });
</script>
{/gJSON.userHeaders.ua.isLoadEmoji}


<!-- Inititializers -->
<script>
function buttonsInitStack() {
    likeButton.init($('.likeButton')); 
    sendComment();
    settingsButton();
    if(typeof starApprove === "function") { starApprove(); }
}
$(function() { buttonsInitStack(); });
</script>

<!-- sendComment button -->
<script>
function sendComment() {
    $('.sendComment').unbind('click.vv').bind('click.vv', function() {
        var postId = $(this).attr('data-pid'),
            postOwnerId = $(this).attr('data-uid'),
            $thisBlock = $(this).closest('article'),
            $commentInput = $thisBlock.find('.postCommentInput'),
            comment = $commentInput.val(),
            $commentButton = $thisBlock.find('.sendComment');

        if(comment.length === 0 ) { return false; }
        
        //prevent spam commenting.
        $commentButton.attr('disabled', 'disabled');
        setTimeout(function() {
            $commentButton.removeAttr('disabled');
        }, 3000);

        if(comment.length > 500) {
            return alertFactory.protoAlert('Oops... your comment is too long. Please shorten to below 500.');
        }
        // AJAX post
        var posting = $.post( "{p.absPath}/api/comment", { postId: postId, postOwnerId: postOwnerId, comment: comment } );

        //prepare the comment
        var commentJSON = {
            comment: comment,
            commentId: Date.now(),
            user: {
                profilePicture: printHead.userHeaders.profilePicture,
                userNameDisp: printHead.userHeaders.userNameDisp
            }
        }
        var $submittedComment = streamFactory.append.eachComment($thisBlock, commentJSON, true, null, true);

        $submittedComment.velocity('transition.slideDownIn');

        $commentInput.velocity('callout.flashShort');
        //flashShort is 400ms. At 200ms, clear the comment text.
        setTimeout(function() { 
            $commentInput.val('');
        }, 200);
        $commentButton.velocity('callout.flashShort');

        //done
        posting.done(function( data ) {
            console.log(data);
            if(data.success) {
                console.log('comment added');
            } else {
                console.log('error');
                $submittedComment.remove();
                alertFactory.commentError();
            }  
        });
        //fail
        posting.fail(function() {
            alertFactory.commentError();
        });
    });
}
</script>

<!-- editDesc button -->
<script>
function editDesc($edit, $cancel) {

    $edit.unbind('click.vv').bind('click.vv', function() {

        var $thisBlock = $(this).closest('article'),
            postId = $(this).attr('data-pid'),
            postOwnerId = $(this).attr('data-uid'),

            $desc = $thisBlock.find('.blockTextHolder textarea'),
            descInput = $desc.val(),

            $itemLink = $thisBlock.find('input[name="itemlink"]'),
            itemLink = $itemLink.val(),

            $itemAddTag = $thisBlock.find('input[name="itemaddtag"]'),
            itemAddTag = $itemAddTag.val(),

            $itemPrice = $thisBlock.find('input[name="itemprice"]'),
            itemPrice = $itemPrice.val(),

            $editButton = $thisBlock.find('.editDesc');

        //original elements
        var $descDiv = $thisBlock.find('.description'),
            $itemLink = $thisBlock.find('.postItemLink'),
            $itemAddTag = $thisBlock.find('.postItemAddTag'),
            $itemPrice = $thisBlock.find('.postItemPrice');

        //containers
        var $metaHolder = $thisBlock.find('.blockMoreInfo');

        //for "me" page, need to update the base element also.
        var $baseArt = $('.profilePostsBlock #mainStream_' + postId);

        //store all the original HTML for reversion
        revertDescHTML = VV.utils.getDOMHTML($descDiv);
        revertMetasHTML = $metaHolder.html();

        $thisBlock.find('.editingDOMS').remove();

        var check1 = $descDiv.attr('data-raw') === encodeURIComponent(descInput);
        var check2 = ($itemLink.attr('data-attr') === itemLink) || (typeof $itemLink.attr('data-attr') === "undefined" && itemLink === '');
        var check3 = $itemAddTag.attr('data-attr') === itemAddTag || (typeof $itemAddTag.attr('data-attr') === "undefined" && itemAddTag === '');
        var check4 = $itemPrice.attr('data-attr') === itemPrice || (typeof $itemPrice.attr('data-attr') === "undefined" && itemPrice === '');

        if(check1 && check2 && check3 && check4) {
            $descDiv.show();
            $thisBlock.find('.editDescButtons').hide();
            return false;
        }

        //there are changes, prepare for submission

        var itemMeta = {
            "itemLink": itemLink,
            "itemAddTag": itemAddTag,
            "itemPrice": itemPrice
        };
        // AJAX post
        var posting = $.post( "{p.absPath}/api/post/edit", { 
            postId: postId,
            desc: descInput,
            itemMeta: JSON.stringify(itemMeta),
            User_userId: postOwnerId
        });

        //done
        posting.done(function( data ) {
            
            if(data.success) {
                $descDiv
                    .html(data.post.descHTML)
                    .attr('data-raw', encodeURIComponent(data.post.desc));

                if($baseArt.length > 0) {
                    $baseArt.find('.description')
                        .html(data.post.descHTML)
                        .attr('data-raw', encodeURIComponent(data.post.desc));
                }

            } else {
                $descDiv.replaceWith(revertDescHTML)
                $thisBlock.find('.description').show();
                $metaHolder.html(revertMetasHTML);
                aF.protoAlert('An error occurred. Changes to your post may not be captured. Please refresh and try again.');
            }  
        });
        //fail
        posting.fail(function(err) {
            $descDiv.replaceWith(revertDescHTML);
            $thisBlock.find('.description').show();
            $metaHolder.html(revertMetasHTML);
            aF.protoAlert('An error occurred. Changes to your post may not be captured. Please refresh and try again.');
            console.log(err);
        });

        //now do all the INSTANT replacements
        if(!check1) {
            $descDiv
                .attr('data-raw', encodeURIComponent(descInput))
                .html(descInput);

            //not replacing for base art.
        }

        //any of the metas are changed
        if(!(check2 && check3 && check4)) {
            if(itemAddTag.indexOf('@') === 0) {
                itemAddTag = itemAddTag.substring(1);
            }
            var post = {
                postMeta: {
                    itemAddTag: itemAddTag,
                    itemLink: itemLink,
                    itemPrice: itemPrice
                }
            }

            $thisBlock.find('.blockMoreInfo').html('');
            if($baseArt.length > 0) { $baseArt.find('.blockMoreInfo').html(''); }

            var moreInfo = streamFactory.append.moreInfoBlock($thisBlock, post);

            if(moreInfo) { 
                $thisBlock.find('.blockMoreInfo').append(moreInfo.html);
                streamFactory.append.moreInfoImg($thisBlock, post, moreInfo);
                streamFactory.append.moreInfoBindButton($thisBlock.find('.moreInfo'));


                if($baseArt.length > 0) { 
                    $baseArt.find('.blockMoreInfo').append(moreInfo.html);
                    streamFactory.append.moreInfoImg($baseArt, post, moreInfo);
                    streamFactory.append.moreInfoBindButton($baseArt.find('.moreInfo'));
                }

            }

        }

        $descDiv.show();
        $thisBlock.find('.editDescButtons').hide();

    });

    $cancel.unbind('click.vv').bind('click.vv', function() {
        var $thisBlock = $(this).closest('article');

        $thisBlock.find('.editingDOMS').remove();
        $thisBlock.find('.description').show();
        $thisBlock.find('.editDescButtons').hide();
    });
}
</script>

<!-- Like Button -->
<script>
var likeButton = {
    main: function($el) {

        var postId = $el.attr('data-pid'),
            postOwnerId = $el.attr('data-uid'),
            action = $el.attr('data-action'),
            $likeButton = $el;

        //disable the button
        $likeButton.unbind('click.vv');
        setTimeout(function() {
            likeButton.init($el);
        }, 1000);

        //change the state
        function changeState() {
            if(action === 'like') {
                $likeButton.velocity('callout.pulse', 200);
                $likeButton.attr('data-action','unlike');
            } else {
                $likeButton.attr('data-action','like');
            }
        }
        changeState();


        // Send the data using post
        var posting = $.post( "{p.absPath}/api/like", { 
            postId: postId, 
            postOwnerId: postOwnerId, 
            action: action 
        });
        
        //done
        posting.done(function( data ) {
            console.log(data);
        });

        //fail
        posting.fail(function() {
            changeState();
            alertFactory.protoAlert('Please either login or check your internet connection.');
        });
    },
    init: function($el) {
        var self = this;
        $el.unbind('click.vv');
        $el.on('click.vv', function() {
            self.main($(this));
        });
    }
}
</script>

<script>
function settingsButton() {
    var $settingsBut = $('.settingsButton'),
        $postDelete = $('.settingsDelete'),
        $postMark = $('.settingsMark'),
        $postEdit = $('.settingsEdit'),
        $openPage = $('.settingsOpen');

    $settingsBut.unbind('click.vv').bind('click.vv', function() {
        var pid = $(this).attr('data-pid'),

            isActive = $(this).hasClass('settingActive');

        if(isActive) {
            $(this).parent().find('.blockInteractSettingsWrap').hide();
            $(this).removeClass('settingActive');
        } else {
            VV.utils.hideSettingsTab();
            $(this).parent().find('.blockInteractSettingsWrap').show();
            $(this).addClass('settingActive');
        }
    });

    $postDelete.unbind('click.vv').bind('click.vv', function() {

        VV.utils.hideSettingsTab();
        var msg = Object.create(aF);

        var pid = $(this).attr('data-pid');
        var uid = $(this).attr('data-uid');
        var isProfilePicture = $(this).attr('data-isprofile');

        var text  = '<h1 style="color:#ccc;text-align:center;">Are you sure?</h1>';
            text += '<h2 style="text-align:center;"><span class="clickable" onclick="VV.utils.deletePostAjax(' + pid + ', ' + uid + ', ' + isProfilePicture + ')">Yes</span>';
            text += '&nbsp;|&nbsp;<span class="clickable" onclick="$.fancybox.close()"> No</span></h2>';

        if(isProfilePicture === "true") {
            text +='<p style="color:#ccc; text-align:center;">Note: This is your profile picture. ';
            text += 'Your latest post will be automatically set as your new profile picture.</p>';
        }

        return msg.protoAlert({
            title: "Delete Post",
            text: text
        });
    });

    $postMark.unbind('click.vv').bind('click', function() {
        $(this).parent().velocity('callout.pulse', 400, function() {
            VV.utils.hideSettingsTab();
        });

        var data = {
            pid: $(this).attr('data-pid'),
            uid: $(this).attr('data-uid')
        }
        var markAjax = $.post(printHead.p.absPath + '/api/post/mark', data);
    });

    $postEdit.unbind('click.vv').bind('click', function() {
        $article = $(this).closest('article');
        var dataArticle = $article.attr('id');

        if($article.parent().hasClass('profilePostsBlock')) {
            $article.find('.postImage').click();
            return setTimeout(function() {
                var $fancyBoxArt = $('article[data-articleid="' + dataArticle + '"]');
                $fancyBoxArt.find('.settingsEdit').click();

                var scrollToElement = function(el, ms){
                    var speed = (ms) ? ms : 600;
                    $('.fancybox-inner').animate({
                        scrollTop: $(el).offset().top
                    }, speed);
                }

                // specify id of element and optional scroll speed as arguments
                scrollToElement('.blockPad', 600);

            }, 0);
        }

        if($article.find('.editingDOMS').length === 0) { 

            //description
            $desc = $article.find('.description');
            var $edit = $desc.edit_hashtags();
            $edit.addClass('editingDOMS');
            $desc.hide();
            VV.utils.tooLong($edit, {
                msg: "Description is too long...",
                limit: 1000
            });

            //metas
            var itemLink = $article.find('.postItemLink').attr('data-attr');
            if(!itemLink) { itemLink = ''; }

            var itemAddTag = $article.find('.postItemAddTag').attr('data-attr');
            if(!itemAddTag) { itemAddTag = ''; }

            var itemPrice = $article.find('.postItemPrice').attr('data-attr');
            if(!itemPrice) { itemPrice = ''; }

            var metaHTML  = '<div class="editingDOMS"><p style="text-align:center;"><span class="glyphicon glyphicon-link"></span><input type="text" name="itemlink" id="itemlink" placeholder="http://" value="'+ itemLink +'"></p>';
                metaHTML += '<p style="text-align:center;"><span class="glyphicon glyphicon-tag"></span><input type="text" name="itemaddtag" id="itemaddtag" placeholder="@shopname" value="'+ itemAddTag +'"></p>';
                metaHTML += '<p style="text-align:center;"><span class="glyphicon glyphicon-usd"></span><input type="text" name="itemprice" id="itemprice" placeholder="price" value="'+ itemPrice +'"></p></div>';

            $(metaHTML).insertAfter($edit);


            $article.find('.editDescButtons').show();

            //bind the buttons
            var $edit = $article.find('.editDesc');
            var $cancel = $article.find('.editDescCancel');
            editDesc($edit, $cancel);

        }

        $(this).parent().velocity('callout.pulse', 400, function() {
            VV.utils.hideSettingsTab();
        });

    });

    //$openPage.unwrap('a').wrap('<a href="/p/' + $(this).attr('data-pid') + '" target="_blank"></a>');

    // $openPage.unbind('click.vv').bind('click', function() {
    //     var $article = $(this).closest('article') || $(this).attr('data-pid');
    //     window.open('/p/' + $article.attr('data-pid'));
    // });

    $(document).unbind('click.settings').on('click.settings', function(e) {
        var target = e.target;
        if ( !$(target).is('.settingsButton') && !$(target).parents().is('.settingsButton') && !$(target).is('.settingsMark') ) {
            VV.utils.hideSettingsTab();
        }
    });
}
</script>

<script>
//jQuery validation needs to complete loading before we re-enable the buttons
//Else, once after the DOM is completed, but before validation is applied, user
//is able to submit the form and get erroneous behaviours.
$('button[type="submit"]').each(function(i, el){
    var $e = $(el);
    if($e.hasClass('permaDisable')) { return false;}
    $e.removeAttr('disabled');
});
</script>


</div><!-- .global_wrapper -->

<footer id="footer" class="spanAll" style="display:none">
    <div>
        <h1></h1>         
        <p></p>
    </div>
</footer>


<!-- sendComment button -->
<script>
$('.sendComment').click(function() {
    var postId = $(this).attr('data-pid'),
        postOwnerId = $(this).attr('data-uid'),
        $thisBlock = $(this).closest('.streamLayout'),
        $commentInput = $thisBlock.find('.postCommentInput'),
        comment = $commentInput.val(),
        $commentButton = $thisBlock.find('.sendComment');
    
    //prevent spam commenting.
    $commentButton.attr('disabled', 'disabled');
    setTimeout(function() {
        $commentButton.removeAttr('disabled');
    }, 3000);

    // AJAX post
    var posting = $.post( "{p.absPath}/api/comment", { postId: postId, postOwnerId: postOwnerId, comment: comment } );

    //prepare the comment
    var commentJSON = {
        comment: comment,
        commentId: Date.now(),
        user: {
            profilePicture: printHead.userHeaders.profilePicture,
            userNameDisp: printHead.userHeaders.userNameDisp
        }
    }
    var $submittedComment = streamFactory.append.eachComment($thisBlock, commentJSON, true, null, true);

    $submittedComment.velocity('transition.slideDownIn');

    $commentInput.velocity('callout.flashShort');
    //flashShort is 400ms. At 200ms, clear the comment text.
    setTimeout(function() { 
        $commentInput.val('');
    }, 200);
    $commentButton.velocity('callout.flashShort');

    //done
    posting.done(function( data ) {
        console.log(data);
        if(data.success) {
            console.log('comment added');
        } else {
            console.log('error');
            $submittedComment.remove();
            alertFactory.commentError();
        }  
    });
    //fail
    posting.fail(function() {
            alertFactory.commentError();
    });
});
</script>

<!-- Like Button -->
<script>
var likeButton = {
    main: function($el) {

        var thisBlock = $el.closest('.streamLayout'),
            postId = $el.attr('data-pid'),
            postOwnerId = $el.attr('data-uid'),
            action = $el.attr('data-action'),
            $likeButton = $el;

        //disable the button
        $likeButton.unbind('click.vv');
        $likeButton.css('cursor','default');
        setTimeout(function() {
            likeButton.init($el);
        }, 1000);

        //change the state
        function changeState() {
            if(action === 'like') {
                $likeButton.velocity('callout.pulse', 200);
                $likeButton.attr('data-action','unlike');
            } else {
                $likeButton.attr('data-action','like');
            }
        }
        changeState();


        // Send the data using post
        var posting = $.post( "{p.absPath}/api/like", { 
            postId: postId, 
            postOwnerId: postOwnerId, 
            action: action 
        });
        
        //done
        posting.done(function( data ) {
            console.log(data);

            if(data.success) {
                console.log('success');
            } else {
                console.log('error');
                changeState();
                alertFactory.protoAlert('Please either login or check your internet connection.');
            }
        });

        //fail
        posting.fail(function() {
            changeState();
            alertFactory.protoAlert('Please either login or check your internet connection.');
        });
    },
    init: function($el) {
        $el.css('cursor','pointer');
        var self = this;
        $el.on('click.vv', function() {
            self.main($(this));
        });
    }
}
likeButton.init($('.likeButton'));
</script>

<script>
$(function() {
    var $settingsBut = $('.settingsButton'),
        $postDelete = $('.settingsDelete');
    $settingsBut.click(function() {
        var pid = $(this).attr('data-pid'),

            isActive = $(this).hasClass('settingActive');

        if(isActive) {
            $(this).parent().find('.blockInteractSettingsWrap').hide();
            $(this).removeClass('settingActive');
        } else {
            $('.blockInteractSettingsWrap').hide();
            $settingsBut.removeClass('settingActive');
            $(this).parent().find('.blockInteractSettingsWrap').show();
            $(this).addClass('settingActive');
        }
    });

    $postDelete.click(function() {

        var msg = Object.create(aF);

        var pid = $(this).attr('data-pid');
        var isProfilePicture = $(this).attr('data-isprofile');

        var text  = '<h1 style="color:#ccc;text-align:center;">Are you sure?</h1>';
            text += '<h2 style="text-align:center;"><span class="clickable" onclick="VV.utils.deletePostAjax(' + pid + ', ' + isProfilePicture + ')">Yes</span>';
            text += '&nbsp;|&nbsp;<span class="clickable" onclick="$.fancybox.close()"> No</span></h2>';

        if(isProfilePicture) {
            text +='<p style="color:#ccc; text-align:center;">Note: This is your profile picture. ';
            text += 'Your latest post will be automatically set as your new profile picture.</p>';
        }

        return msg.protoAlert({
            title: "Delete Post",
            text: text
        });
    });
    $(document).click(function(e) {
        var target = e.target;
        if (!$(target).is('.settingsButton') && !$(target).parents().is('.settingsButton')) {
            $('.blockInteractSettingsWrap').hide();
            $('.settingActive').removeClass('settingActive');
        }
    });

});
</script>



<script src="{p.js}/core.js"></script>


{>blockHeader/}
{>blockHeaderAfterHook/}
<style>
header.profileHeader>div {
    margin-left: auto;
    margin-right: auto;
    text-align:center;
}
.profileHeader {
    border-bottom: 1px solid #ccc;
    background: #f7f7f7;
    padding-top: 10px;
    padding-bottom: 10px;
}

        .profilePictureCont {
            width: 100px;
            margin: auto;
        }
            .profilePictureCont img {
                width: 100%;
            }

        .profileUserNameDisp {
            font-size: 26px;
            font-weight: bold;
            margin-top: 2px;
        }

        .profileInfoInlines {

        }
            .profileInfoInlines>div {
                display: inline-block;
                padding: 5px 2px;
            }

        .profileAbout {
            margin-top: 20px;
            width: 280px;
        }

        .profileRelationship {
            margin-top: 20px;
        }
            .profileFollowBlock {
                display:inline-block;
                padding: 0px 10px;
                height: 52px;
                vertical-align: middle;
            }
            .profileFollowBlock:not(:first-child) {
                border-left: 1px solid #ccc;
            }

                .profileFollowWrap {
                    display: inline-block;
                    vertical-align: middle;
                }
                    .profileFollowHdr, .profileFollowingHdr {
                        text-transform: uppercase;
                        color: #ccc;
                        font-size: 12px;
                        padding-top: 4px;
                    }

                    .profileFollowCount {
                        font-weight: bold;
                        font-size: 20px;
                    }

                    @media (min-width: 0px) and (max-width: 480px) {
                        .profileFollowButtonCont {
                            display: block;
                            border-left: 0px !important;
                        }
                    }
                    .profileFollowText {
                        font-size: 13px;
                        color: #ccc;
                        max-width: 200px;
                    }
                    #profileFollowButton {
                        font-size: 12px;
                        height: 24px;
                        width: 132px;
                        padding: 7px 0px;
                    }




.profilePostsBlock {
    width: 100%;
    text-align: center;
} 

    .profilePostsBlock article {
        display: inline-block;
        text-align: left;
        vertical-align: top;
    }

    /*profilePostsBlock and its article responsive */ 
    @media (min-width: 0px) and (max-width: 320px) {
        .profilePostsBlock {
            padding: 2px;
        }
        .profilePostsBlock article {
            width: 153px;
            padding: 2px;
        }

    }  
    @media (min-width: 321px) and (max-width: 480px) {
        .profilePostsBlock {
            padding: 2px;
        }
        .profilePostsBlock article {
            width: 48.5%;
            padding: 2px;
        }

    }  
    @media (min-width: 481px) and (max-width: 640px) {
        .profilePostsBlock {
            padding: 2px;
        }
        .profilePostsBlock article {
            width: 32.3%;
            padding: 2px;
        }

    }
    @media (min-width: 641px) and (max-width: 767px) {
        .profilePostsBlock {
            padding: 5px;
        }
        .profilePostsBlock article {
            width: 23.4%;;
            padding: 5px;
        }

    } 
    @media (min-width: 768px){
        .profilePostsBlock {
            padding: 10px;
        }
        .profilePostsBlock article {
            width: 166px;
            padding: 10px;
        }

    } 


    .blockProfileThumb, .blockUserHolder, .blockLikeText, .blockTextHolder, .blockLoadMoreText, .postCommentCont, .postInteractions {
        display: none;
    }

    /* Display Hacks */
    .blockPad {
        height: 36px;
        margin-top: -10px;
        margin-bottom: 8px;
    }
    .blockMainInfo {
        border: 0px;
    }
    .blockTop {
        position: absolute;
    }
        .blockInteract {
            padding-top: 8px;
        }

            .blockInteract .blockInteractText {
                display: none;
            }

            .blockInteract div[class^="icon-"] {
                font-size: 18px;
            }
            .blockInteract>div {
                display: inline-block;
            }

</style>
<section id="main">

    <header class="profileHeader">

        <div class="profilePictureCont">
            {?renderJSONraw.profilePicture}
            <img src="{p.mediaDir}/{renderJSONraw.profilePicture}.jpg">
            {:else}
            <img src="{f.errProfilePic}">
            {/renderJSONraw.profilePicture}
        </div>

        <div class="profileUserNameDisp">
            @{renderJSONraw.userNameDisp}
        </div>

        <div class="profileInfoInlines">
            {?renderJSONraw.name}
            <div class="profileFullName">
                {renderJSONraw.name}
            </div>
            {/renderJSONraw.name}

            <div class="profileEmail">
                {renderJSONraw.email}
            </div>
        </div>

        <div class="profileAbout">
            {?renderJSONraw.about}
                "{renderJSONraw.about}"
            {:else}
                "No description yet..."
            {/renderJSONraw.about}
        </div>


        <div class="profileRelationship">
            <div class="profileFollowBlock">
                <div class="vaDiv"></div>
                <div class="profileFollowWrap">
                    <div class="profileFollowHdr">
                        Followers
                    </div>
                    <div class="profileFollowCount" id="profileFollowersCount">
                        {renderJSONraw.followerCount}
                    </div>
                </div>
            </div>

            <div class="profileFollowBlock">
                <div class="vaDiv"></div>
                <div class="profileFollowWrap">
                    <div class="profileFollowHdr">
                        Following
                    </div>
                    <div class="profileFollowCount" id="profileFollowingCount">
                        {renderJSONraw.followingCount}
                    </div>
                </div>
            </div>
            {?renderJSONraw.isFollowable}
                <div class="profileFollowButtonCont profileFollowBlock">
                    <div class="vaDiv"></div>
                    <div class="profileFollowWrap">
                        {?renderJSONraw.targetFollowedViewer}
                            <div class="profileFollowText">
                                @{renderJSONraw.userNameDisp} is following you.
                            </div>
                        {/renderJSONraw.targetFollowedViewer}
                        <div class="profileFollowButtonDiv">
                            {?renderJSONraw.viewerFollowedTarget}
                                <button class="darkButton" id="profileFollowButton" data-action="unfollow" data-uid="{renderJSONraw.userId}" {?renderJSONraw.targetFollowedViewer}data-follow="follow back"{/renderJSONraw.targetFollowedViewer}>unfollow</button>
                                {:else}
                                <button class="darkButton" id="profileFollowButton" data-action="follow" data-uid="{renderJSONraw.userId}"  {?renderJSONraw.targetFollowedViewer}data-follow="follow back"{/renderJSONraw.targetFollowedViewer}>
                                    {?renderJSONraw.targetFollowedViewer}
                                        follow back
                                    {:else}
                                        follow
                                    {/renderJSONraw.targetFollowedViewer}
                                </button>
                            {/renderJSONraw.viewerFollowedTarget}
                        </div>
                    </div>
                </div>
            {/renderJSONraw.isFollowable}


        </div>

    </header>


    <div class="profilePostsBlock">
        {>"layouts/profilePostsLayout"/}
    </div>

    <!-- end your stream -->
</section><!-- main -->

{>blockFooter/}

{>layoutFactory/}

<script>
var profilePostFactory = Object.create(streamFactory);

profilePostFactory.streamContClass = 'profilePostsBlock';

profilePostFactory.append.identifier = function($el, post) {
    return $el.attr('data-uid', post.User_userId).attr('data-pid', post.postId);
}
profilePostFactory.append.profileThumb = function(post) {
    var theParent = this.parent;
    var profilePic = renderJSON.profilePicture;

    var pp = (profilePic) ? theParent.mediaDir + '/' + profilePic + '.jpg' : theParent.errorImg;

    var blockProfileThumbHTML  = '<a href="/' + renderJSON.userNameDisp + '">';
        blockProfileThumbHTML += '<img src="' + pp + '"></a>';

    return blockProfileThumbHTML;
}
profilePostFactory.append.userName = function(post) {
    var blockUserNameHTML  = '<a href="/' + renderJSON.userNameDisp + '">';
        blockUserNameHTML += renderJSON.userNameDisp + '</a>';
    return blockUserNameHTML;
}
profilePostFactory.append.effect = function($el) {
    return $el.velocity('fadeIn', {
        duration: 300,
        display: 'inline-block'
    });
}

profilePostFactory.init(renderJSON.posts, {burst: 0});
</script>
<!-- Follow Button -->
<script>
var followButton = {
    main: function($el) {

        var targetUserId = $el.attr('data-uid'),
            action = $el.attr('data-action'),
            $followButton = $el,
            $followersCount = $('#profileFollowersCount'),
            followersCount = parseFloat($followersCount.html()),
            followText = $followButton.attr('data-follow'); //this is to capture the "follow back" if it exist.


        //disable the button
        $followButton.attr('disabled','disabled');
        setTimeout(function() {
            $followButton.removeAttr('disabled');
        }, 1000);

        //change the state
        function changeState() {
            if(action === 'follow') {
                $followButton.velocity('callout.pulse', 200);
                $followButton.attr('data-action','unfollow');
                $followButton.html('unfollow');
                $followersCount.html(followersCount+1);
            } else {
                $followButton.attr('data-action','follow');
                $followersCount.html(followersCount-1);
                if(followText) {
                    $followButton.html(followText);
                } else {
                    $followButton.html('follow');
                }
            }
        }
        changeState();


        // Send the data using post
        var posting = $.post( "{p.absPath}/api/follow", { 
            userId: targetUserId, 
            action: action 
        });
        
        //done
        posting.done(function(data) {
            console.log(data);

            if(data.success) {
                console.log('success');
            } else {
                console.log('error');
                changeState();
                alertFactory.protoAlert('Please either login or check your internet connection.');
            }
        });

        //fail
        posting.fail(function() {
            changeState();
            alertFactory.protoAlert('Please either login or check your internet connection.');
        });
    },
    init: function($el) {
        var self = this;
        $el.click(function(e) {
            e.preventDefault();
            return self.main($el);
        });
    }
}
followButton.init($('#profileFollowButton'));
</script>

{>blockFooterScripts/}

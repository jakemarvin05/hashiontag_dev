{>blockHeader/}

<script src="{p.js}/socket.io.js"></script>
<script>
var socket = io.connect();
var socketId = '';

socket.on('welcome', function (data) {
    socketId = data.message;
});

// Reconnects on disconnection
socket.on('disconnect', function(){
    console.log("reconnecting to server....");
    //VERIFY
    socket.connect();
});

socket.on('uploadProgress', function(data){
    var percentage = data.bytesReceived/data.bytesExpected;
    console.log(percentage);
    $('#progressBar').css('width', (percentage*100).toString()+'%');
});
</script>

<script src="{p.js}/vvImg.js"></script>
<script>
VV.img.CSRender = {CSRender};
</script>

<style>
#main {
    overflow: hidden;
}
#cropPortCont {
    width: 100%;
    position: relative;
}
    #cropPortBg {
        max-height: 0px;
        position: relative;
        top: 20px;
        width: 280px;
        margin: auto;
    }
     #cropPortBg img {
        display: block;
        margin: auto;
        position: relative;
        opacity: 0.4;
        filter: alpha(opacity=40);
     }
    #cropPort {
        height:280px; 
        width:280px; 
        box-sizing:border-box; 
        outline:2px dotted #e44447;
        margin: 20px auto;
        overflow: hidden;
    }
img[id^=img_preview], canvas[id^=img_preview] {
    position:relative;
}
#img_field {
    opacity: 0;
    filter: alpha(opacity=0);
    position: absolute;
    max-height: 0px;
    max-width: 0px;
}
#browseCont, #scaleCont, #postCont {
    text-align:center;
}
#scaleSliderCont {
    width:280px;
    height: 50px;
    padding-top: 20px;
    margin:auto;
}
    #scaleSlider {
        width: 100%;
        height: 2px;
        background-color: #ccc;
    }   
    #scaleSliderBut {
        background-color: #e74447;
        margin-top: -14px;
        margin-left: 10px;
        width: 50px;
        height: 25px;
        cursor: move;
    }

#postCont textarea {
    width: 290px;
    height: 90px;
}

#progressBarCont {
    height: 20px;
    width: 280px;
    background-color: #ccc;
    margin: auto;
}
    #progressBar {
        height: 100%;
        width: 0%;
        background-color: #d91639;
        -webkit-transition: width 0.5s;
        transition: width 0.5s;
    }

#postWhereText {
    margin: 20px auto;
    width: 200px;
}
    #postWhereText p {
        margin: 0px;
    }

/* loader studs styling */
#loaderStuds {
    position: absolute;
    top: 49%;
    width: 100%;
}
.searchLoader {
    margin: auto;
    width: 30px;
}
</style>
{>blockHeaderAfterHook/}

<section id="main">
    <div class="mainColBlock">

        {?isLoggedIn}

        <div id="cropPortCont">
            <div id="cropPortBg"></div>
            <div id="cropPort"></div>
            <div id="loaderStuds"></div>
        </div>
        <script>
        //initialize the loader
        var loaderStuds = Object.create(VV.utils.loaderEffect);
        loaderStuds.init($('#loaderStuds'));
        //set the crop port
        var windowW = $(window).width();
        if(windowW > 640) {
            VV.img.CROP_PORT = 480;
            $("#cropPort").css('height', VV.img.CROP_PORT).css('width', VV.img.CROP_PORT);
            $("#cropPortBg").css('width', VV.img.CROP_PORT);
        }
        //init dragShifting
        $(function() {
            dragShifting.init();
            //init pinch scaling
            scaleSlider.pinch.init(document.getElementById('cropPort'));
        });
        </script>
        <div id="browseCont">
            <button id="browseButton">Browse</button>
            <input id="img_field" type="file" name="img" accept="image/jpeg,image/gif,image/png" required></input>
        </div>
        <script>
        //bind button to input="file"
        $('#browseButton').click(function() {
            $('#img_field').focus().trigger('click');
        });
        </script>

        {! Bindings for these buttons are below !}
        <div id="scaleCont" style="display:none">
            <div id="scaleSliderCont">
                <div id="scaleSlider"></div>
                <div id="scaleSliderBut"></div>
                <script>
                //init scale slider button
                $(function() { scaleSlider.init($('#scaleSliderBut')) });
                </script>
            </div>
            <button id="backToBrowse">Back</button>&nbsp;<button id="doneScaling">Done scaling</button>
        </div>
        <div id="postCont" style="display:none">
            <div class="postDesc">
                <textarea name="desc" id="desc" placeholder="Write something about your photo..." required></textarea><br/>
            </div>
            <script>
            VV.utils.tooLong($('#desc'), {
                msg: "Description is too long...",
                limit: 1000
            });
            //tags highlighting
            $(function() { $("#desc").hashtags('newpost'); });
            </script>

            <div class="postWhereDidYou">
                <div id="postWhereText">
                    <p><span class="glyphicon glyphicon-chevron-right"></span>Share where I got it</p>
                </div>

                <div id="postWhereFields" style="display:none;" data-show="false">
                    <p><span class="glyphicon glyphicon-link"></span><input type="text" name="itemlink" id="itemlink" placeholder="http://"></p>
                    <p><span class="glyphicon glyphicon-tag"></span><input  type="text" name="itemaddtag" id="itemaddtag" placeholder="@shopname"></p>
                    <p><span class="glyphicon glyphicon-usd"></span><input  type="text" name="itemprice" id="itemprice" placeholder="price"></p>
                </div>

                <script>
                (function() {
                    var button = $('#postWhereText');
                    var fields = $('#postWhereFields');
                    button
                        .css('cursor','pointer')
                        .click(function() {
                            if(fields.attr('data-show') === "false") {
                                $('.glyphicon-chevron-right').velocity({rotateZ: "90deg"}, 200);
                                fields.velocity('transition.slideDownIn', 200, function(el) {
                                    $(el).attr('data-show', "true");
                                });
                            }
                        });
                })();
                </script>

            </div>

            <div class="postButtonCont">
                <button id="backToScale">Back</button>&nbsp;
                <button id="postButton" class="darkButton">
                    Post it!
                </button>
            </div>

        </div>

        <div id="progressBarCont" style="display:none">
            <div id="progressBar"></div>
        </div>

        {:else}
        <div class="noticePad">
            <h1>Post</h1>
            You are not logged in. To post, please log in <a href="{#p}{login}{/p}">here</a>
        </div>
        {/isLoggedIn}
    </div>
    <!-- end your stream -->
</section><!-- main -->

{>blockFooter/}

<script src="{p.js}/exif.binaryjax.js"></script>
{!<script type="text/javascript" src="{p.js}/caman.full.min.js"></script>!}

<script>

/*******************
* Image processing *
*******************/

/* Functional schema
    
    $("#img_field").change()
        !--> reader.readAsDataURL()
                !--> reader.onload()
                        !--> VV.img.STOCK_IMG.onload()
                                !--> ends.
*/

var $img_field = $('img_field');
var el_img_field = document.getElementById('img_field');

VV.img.STOCK_IMG.onload = function() {
    var self = this;
    console.log('img onload');

    //480x480
    if(this.height < 480 || this.width < 480 ) {
        loaderStuds.kill();
        return aF.protoAlert({
                text:'Please select an image with at least 480px by 480px resolution', 
                title:'Resolution too small'
        });
    }

    VV.img.STOCK_IMG_MP = this.height*this.width/1000000;
    if(VV.img.STOCK_IMG_MP > VV.img.RESIZE_MP_LIMIT) {
        loaderStuds.kill();
        return aF.protoAlert({
                text:'Please resize your image before uploading.', 
                title:'Resolution too high'
        });
    }

    //ok clear to proceed...

    //store the heights for use later.
    VV.img.STOCK_IMG_W = this.width;
    VV.img.STOCK_IMG_H = this.height;
    
    //check if image MP within prescribed limits
    //NOTE: VV.imgCSRender is being over-written with the same limit as the absolute
    var clientCanHandle = (VV.img.CSRender >= VV.img.STOCK_IMG_MP);

    if(clientCanHandle) {
        //get EXIF first, returns a hasEXIF flag.
        //callback the subsequent steps
        VV.img.getEXIF(el_img_field.files[0], function(exif) {

            //set resizer
            //the picture don't have to be larger than what we allow users to scale.
            //our base size is 640x640, which means the smaller of the width of height
            //is 1280(if scale limit is 2), which essentially allows users to 2x their image.
            //scaleTo indicates the smaller of the dimension when image is downsized proportionally.
            var scaleTo = VV.img.CROP_SIZE*VV.img.SCALE_LIMIT;

            //prepare the canvas size.
            var canvas = VV.img.canvasrise(self, scaleTo);

            //everything passes through to canvasResize for resizing/rotating.
            //if you want to rotate, pass in the EXIF information.
            //if the canvas comes with image, set 2nd argument to FALSE.
            //it takes argument:
            //1.[the prepared canvas], 2.[desired scale], 3.[img or FALSE], 4.[exif or FALSE], 5.[callback]
            //canvasResize returns a resized canvas with image drawn.
            //it is synchronous, as at 14Oct14. But a callback is provided anyway.
            VV.img.canvasResize(canvas, scaleTo, self, exif, function(canvas) {
                //iOS mobile might fail at this point. but we can proceed and check later.
                VV.img.dispTmp('canvas', canvas);  
            });  

        });
    } else {
        //upload the image that client can't handle
        var attrs = {
            action: 'raw',
            imgData: el_img_field.files[0],
            processData: false
        }
        return VV.img.upload(attrs, function(data) {
            VV.img.dispTmp('imgData', data.pathToImg);
        }); //VV.img.upload;
    }  

    //TRANSITIONS
    $("#browseCont").velocity("transition.slideLeftOut", 200);
    $("#cropPort").css('cursor', 'move');  
} //img onload

var reader = new FileReader();
reader.onload = function(e) {
    VV.img.STOCK_IMG.src = '';
    VV.img.STOCK_IMG.src = e.target.result;
}

//File Input onchange
$("#img_field").change(function(){
    var self = this;
    //console.log("New file");

    if(!this.files && !this.files[0]) { return false; }

    //file is not an image
    if( (this.files[0].type).indexOf('image') === -1 ) { 
        VV.utils.resetFormElement($('#img_field'));
        return aF.protoAlert({
                text:'It seems that your file is not an image or corrupted.', 
                title:'File type error.'
            });
    }

    //console.log(this.files[0].size);
    var tooBig = function(size) {
        aF.protoAlert({
            text:'Your image file is too large. Please resize your image to below ' + size, 
            title:'Max filesize exceeded.'
        });
    }
    //limit 5mb for mobile
    if( printHead.userHeaders.isMobile && this.files[0].size > 5242880 ) {
        return tooBig('5mb');
    } else {
        //limit 10mb for the rest
        if(this.files[0].size > 10485760) {
            return tooBig('10mb');
        }
    }

    //objectURL method not supported by Firefox
    //var objectURL = URL.createObjectURL(this.files[0]);

    {! *** this wont occur anymore.
    if($('#img_preview').length > 0) {
        $('#cropPortBg img').velocity("fadeOut", { 
            duration: 200,
            complete: function(el) { 
                $(el).remove(); 
            }
        });
        $('#img_preview').velocity("fadeOut", {
            duration: 200,
            complete: function(el) {
                $(el).remove();
                $('.img_previews').remove();
                loaderStuds.run();
                reader.readAsDataURL(self.files[0]);
                //VV.img.STOCK_IMG.src = objectURL;
            }
        });
    } else {
        loaderStuds.run();
        reader.readAsDataURL(this.files[0]);
        //VV.img.STOCK_IMG.src = objectURL;
    }

    *** !}

    //start the loading.
    loaderStuds.run();
    reader.readAsDataURL(this.files[0]);

    //reset all globals
    VV.img.resetGlobal();
    scaleSlider.reset($('#scaleSliderBut'));
});

/******************
* Post processing *
******************/


$("#doneScaling").click(function(){
    //unbind dragShifting
    var $cP = $('#cropPort');
    dragShifting.kill($cP);
    loaderStuds.run();
    $cP.css('cursor', 'default');

    //slideout scale container
    $('#scaleCont').velocity('transition.slideLeftOut', {duration: 200});

    //This option is only available to client-side render.
    //1. crop and resize VV.img.TEMP_IMG.
    //2. re-apply filters. (not implemented)
    if(VV.img.CSRender !== false) {

        //draw up the tempCanvas we want to resize.
        //keeping the original one so that user can revert back.
        var tempCanvas = document.createElement('canvas');
        var tempCanvasCtx = tempCanvas.getContext('2d');
        tempCanvas.height = VV.img.TEMP_IMG_H;
        tempCanvas.width = VV.img.TEMP_IMG_W;
        tempCanvasCtx.drawImage(VV.img.TEMP_IMG, 0, 0);

        //m tells you how much bigger the image used for processing is.
        //this is used to multiply the drag shifted offsets IMG_X and IMG_Y
        if(tempCanvas.height > tempCanvas.width) {
            var m = VV.img.TEMP_IMG_W / (VV.img.CROP_PORT*VV.img.SCALE);
        } else {
            var m = VV.img.TEMP_IMG_H / (VV.img.CROP_PORT*VV.img.SCALE);
        }
        //canvasCrop takes in a drawn canvas and returns
        VV.img.canvasCrop('canvas', tempCanvas, m, VV.img.SCALE, function(cropped) {
            VV.img.canvasResize(cropped, VV.img.CROP_SIZE, false, false, function(canvas) {
                //in future, apply filters here.
                canvas.style['height'] = '100%';
                canvas.style['width'] = '100%';
                canvas.id = 'img_preview2';
                canvas.className = 'img_previews';
                
                //transitions
                loaderStuds.kill();
                $('#cropPortBg img').velocity({opacity:0}, 200, function(el) {
                    $(el).hide();
                    $('#img_preview').hide();
                    var h = $('#cropPort').height(),
                        w = $('#cropPort').width(),
                        reduction = 4;
                    $('#cropPort')
                        .append(canvas)
                        .attr('data-h', h).attr('data-w', w)
                        .velocity({height: h/4, width: w/4});

                    //safari sometimes don't respond to the first call.
                    //so we try again when it is less busy.
                    setTimeout(function() {
                        loaderStuds.kill();
                    },50);

                    $('#postCont').velocity('transition.slideRightIn', 200);
                }); 

            });
        });
    } else {
        //transitions
        $('#cropPortBg img').velocity({opacity:0}, 200, function() {
            $('#postCont').velocity('transition.slideRightIn', 200);
        }); 
    }
}); // #processImage click


$("#postButton").click(function(e){
    e.preventDefault();

    $("#postCont").velocity("transition.slideLeftOut", 200);
    $("#progressBarCont").velocity("transition.slideRightIn", 200);

    if(VV.img.CSRender !== false) {
        //var submittedCanvas = document.getElementById('img_preview');
        //var tempCanvas = VV.img.cloneCanvas(submittedCanvas);
        // VV.img.canvasResize(tempCanvas, VV.img.CROP_SIZE*VV.img.SCALE, false, function(canvas) {

        //     VV.img.canvasCrop('canvas', canvas, function(data) {
        //         var blobBin = atob( data.split(',')[1] );
        //         var array = [];
        //         for(var i = 0; i < blobBin.length; i++) {
        //             array.push(blobBin.charCodeAt(i));
        //         }
        //         var file = new Blob([new Uint8Array(array)], {type: 'image/jpeg'});

        //         var attrs = {
        //             action: 'store',
        //             imgData: file,
        //             processData: false,
        //             desc: $('#desc').val()
        //         }

        //         VV.img.upload(attrs, function(data) {
        //             //redirect to post
        //             window.location.href = '/';
        //             console.log(data.postId);
        //         });
        //     });
        // });

        var el_finalCanvas = document.getElementById('img_preview2');

        var data = el_finalCanvas.toDataURL('image/jpeg', VV.img.QUALITY);
        var blobBin = atob( data.split(',')[1] );
        var array = [];
        for(var i = 0; i < blobBin.length; i++) {
            array.push(blobBin.charCodeAt(i));
        }
        var file = new Blob([new Uint8Array(array)], {type: 'image/jpeg'});

        var attrs = {
            action: 'store',
            imgData: file,
            processData: false,
            desc: $('#desc').val(),
            dataMeta: {},
            itemMeta: {}
        }

        //get the meta values
        var $whereFields = $('#postWhereFields'),
            itemLink = $whereFields.find('input#itemlink').val(),
            itemAddTag = $whereFields.find('input#itemaddtag').val(),
            itemPrice = $whereFields.find('input#itemprice').val();



        if($whereFields.attr('data-show') === "true" && (itemLink||itemAddTag||itemPrice) ) {
            //data-show is true, and either some or all inputs have values -> get values

            attrs.itemMeta = {
                "itemLink": itemLink,
                "itemAddTag": itemAddTag,
                "itemPrice": itemPrice
            }

        }

        VV.img.upload(attrs, function(data) {
            //redirect to post
            window.location.href = '/p/' + data.postId;  
        });

    } else {

        var processData = {
            crop: {
                x: VV.img.IMG_X,
                y: VV.img.IMG_Y,
                scale: VV.img.SCALE,
                cp: VV.img.CROP_PORT
            }
        }
        console.log(processData);

        var attrs = {
            action: 'process',
            imgData: VV.img.TEMP_IMG.src,
            processData: processData,
            desc: $('#desc').val()
        }

        VV.img.upload(attrs, function(data) {
            window.location.href = '/p/' + data.postId;
            console.log(data.postId);
            
        });
    }    
}); //submit onclick
</script>
<script>

/******************
* Reversals *
******************/
//all the back buttons here
$('#backToBrowse').click(function() {
    $(this).attr('disabled', 'disabled');
    var $but = $(this)
    setTimeout(function() {
        $but.removeAttr('disabled');
    }, 500);

    //reset mouse cursor
    $("#cropPort").css('cursor', 'default');  
    //fade and remove the uploaded picture.
    $('#cropPortBg img').velocity('fadeOut', 200, function(el) {
        $(el).remove();
    });
    VV.utils.resetFormElement($('#img_field'));

    $('#img_preview').velocity('fadeOut', 200, function(el) {
        $(el).remove();
    });
    $('#scaleCont').velocity('transition.slideRightOut', 200, function() {
        $("#browseCont").velocity("transition.slideLeftIn", 200);
    })  

});
$('#backToScale').click(function() {
    $(this).attr('disabled', 'disabled');
    var $but = $(this)
    setTimeout(function() {
        $but.removeAttr('disabled');
    }, 500);

    var $c = $('#cropPort'),
        cH = $c.attr('data-h'),
        cW = $c.attr('data-w');
    $('#cropPort').velocity({height: cH, width: cW}, function() {

        //fade in the bg image.
        $('#cropPortBg img').show().velocity({opacity:0.4}, 200, function() {
            //remove the cropped image
            $('#img_preview2').remove();
            $('#img_preview').show();
            dragShifting.init();
            $c.css('cursor', 'move');
        });

        $('#postCont').velocity('transition.slideRightOut', 200, function(el){
            //reset all the fields
            $(el).find('input').each(function(i, elem) {
                $(elem).val('');
            });
            $(el).find('textarea').each(function(i, elem) {
                $(elem).val('');
            });


            $('#scaleCont').velocity('transition.slideLeftIn', 200);
            //if the where fields are open, reset them
            $('#postWhereFields').hide().attr('data-show','false');
            $('.glyphicon-chevron-right').css({"transform": "rotateZ(0deg)"});

        });
    });

});
</script>

</body>
</html>

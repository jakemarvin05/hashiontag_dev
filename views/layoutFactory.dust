{! ==================================================
    index, Me
!}

{! TODO!!: FIX THIS COMPLICATED AND UNMODULARISE PIECE OF SHIT !}


{?renderJSON}{?isStream}
    
<script>
var streamFactory = {

    mainStreamPrefix: 'mainStream_',
    mainBlock: '.mainColBlock',
    $mainBlock: $( '.mainColBlock' ),
    userBlock: '.blockUsername',
    tLBlock: '.blockTimelapse',
    desc: '.description',
    postInt: '.postInteractions',
    commentButton: '.sendComment',
    likeButton: '.likeButton[data-action="like"]',
    unlikeButton: '.likeButton[data-action="unlike"]',
    imageBlock: '.fancybox',
    layoutHTML: function() {
        $( '.mainColBlock .streamLayout' ).wrap('<div></div>');
        var html = $( '.streamLayout' ).parent('div').html();
        $( '.streamLayout' ).unwrap();
        return html;
    },
    mediaDir: '{p.mediaDir}',
    errorImg: '{p.img}/image404.jpg',

    objCount: function(obj) {
        if( (typeof obj != undefined) && obj ) {

            return Object.keys(obj).length;

        } else {
        
            return 0;
        }
    },
    noObj: function() {

        {@select key=streamType}
            {@eq value="ownPosts"}
            var message = 'You don\'t have any posts. <a href="{p.post}">Post something!</a>';
            {/eq}
            {@eq value="following"}
            var message = 'No stream for you... follow some people!';
            {/eq}

            {@default}var message = 'Nothing here...';{/default}
        {/select}

        $( '.streamLayout .description').html(message);

    },
    getRandom: function(arr, size) {
        var shuffled = arr.slice(0), i = arr.length, temp, index;
        while (i--) {
            index = Math.floor((i + 1) * Math.random());
            temp = shuffled[index];
            shuffled[index] = shuffled[i];
            shuffled[i] = temp;
        }
        return shuffled.slice(0, size);
    },
    likeText: function(obj) {
        var _ = this;

        var toPrepend = '';

        if(obj.totalLikes > 0) {
            var likersFollowed = obj.likes,
                likersFollowedCount = Object.keys(likersFollowed).length,
                show = 3,
                loopRuns = 0,
                likersDispHTML = '',
                likersDisp = {};

            if(likersFollowedCount > 0) {

                if(likersFollowedCount > show) {
                    likersDisp = _.getRandom(likersFollowed, show);
                    loopRuns = show;
                } else {
                    likersDisp = likersFollowed;
                    loopRuns = likersFollowedCount;
                }

                for(k=0;k<loopRuns;k++) {
                    console.log(likersDisp[k]);
                    var name = likersDisp[k].user.userNameDisp;

                    if(k>0) {
                        likersDispHTML += ', ';
                    }
                    likersDispHTML += '<a href="{p.absPath}/' + name + '">' + name +'</a>';
                }
            }

            //TODO: Do away with text-based like description....
            var andLikes = '';
            if(likersFollowedCount > 3) {

                //sally, mary, jane and 99 others like this.

                var offsetCount = String(obj.totalLikes - 3);

                andLikes  = ' and ';
                andLikes += '<span class="postLikesCount" data-likescount="' + offsetCount + '">';
                andLikes += offsetCount;
                andLikes += '</span>';
                andLikes += ' others like this.';

            } else if(likersFollowedCount > 0) {

                //sally, mary and 99 others like this.

                var offsetCount = String(obj.totalLikes - likersFollowedCount);

                andLikes  = ' and ';
                andLikes += '<span class="postLikesCount" data-likescount="' + offsetCount + '">';
                andLikes += offsetCount;
                andLikes += '</span>';
                andLikes += ' others like this.';

            } else if(obj.totalLikes > 1) {

                // 2-99 people like this.

                var offsetCount = String(obj.totalLikes);

                andLikes  = '<span class="postLikesCount" data-likescount="' + offsetCount + '">';
                andLikes += offsetCount;
                andLikes += '</span>';
                andLikes += ' people like this.';

            } else if(obj.hasLiked) {

                //totalLikes is 1 and you liked this -> You are the only one.

                // You like this.

                andLikes = 'You like this.';

            } else {

                // person liked it and it isn't you.

                // 1 person likes this.

                var offsetCount = String(obj.totalLikes);

                andLikes  = '<span class="postLikesCount" data-likescount="' + offsetCount + '">';
                andLikes += offsetCount;
                andLikes += '</span>';
                andLikes += ' person likes this.';
            }

            toPrepend = likersDispHTML + '<span class="postAndLikes">' + andLikes + '</span>';

        } else {

            toPrepend = '';
        }

        toPrepend = '<p>' + toPrepend + '</p>'
            
        return toPrepend;
    },
    build: function() {
        var _ = this,
            layoutHTML = _.layoutHTML(),
            postCount = _.objCount(renderJSON.posts);

        if ( postCount < 1 ) { 

            _.noObj();

        } else {
            
            $( _.mainBlock + ' ' + '.streamLayout' ).remove();
            for( i=0; i<postCount; i++ ) {
                
                var obj = renderJSON.posts[i];
                var mStreamId = _.mainStreamPrefix + obj.postId;
               

                //create the block
                var newBlock = layoutHTML.replace('layoutId', mStreamId);
                _.$mainBlock.append( newBlock );

                //append contents
                _.append(mStreamId, obj);

            }//for loop
        }
    },
    append: function(mStreamId, obj) {
        var _ = this,
            mStreamId = '#' + mStreamId,
            mS = mStreamId + ' ';

        $( mStreamId ).hide();

        //ids
        $( mStreamId )
            .attr('data-uid', obj.user.userId)
            .attr('data-pid', obj.postId);


        $( mS + _.userBlock ).html('<a href="/' + obj.user.userNameDisp + '">' + obj.user.userNameDisp + '</a>');
        $( mS + _.tLBlock ).html(obj.timeLapse);
        $( mS + _.desc ).html(obj.desc);
        $( mS + _.commentButton ).attr('data-id', obj.postId);

        if(obj.hasLiked) {
            $( mS + _.unlikeButton).show();
            $( mS + _.likeButton).remove();
        } else {
            $( mS + _.likeButton).show();   
            $( mS + _.unlikeButton).remove();       
        }
        

        //image
        var imgURL = '';

        imgURL = _.mediaDir + '/' + obj.postId + '.jpg';

        $.get(imgURL)
            .done(function() { 

                    $( mStreamId + ' ' + _.imageBlock )
                        .html('<img src="' + imgURL + '" alt="' + obj.desc + '">')
                        .attr('href', imgURL)
                        .attr('content', obj.desc);

            }).fail(function() { 

                    $( mStreamId + ' ' + _.imageBlock ).html('<img src="' + _.errorImg + '">');
                    $( mStreamId + ' ' + _.imageBlock + ' img').unwrap();

            });

        //comments
        var comments = obj.comments,
            commentCount = _.objCount(comments);

        if(commentCount > 0) {

            for(j=0; j<commentCount; j++) {

                var comment = comments[j],
                    timestampAgo = moment(comment.createdAt).fromNow();

                var html = '<p class="postComment">' + comment.user.userNameDisp + ': ' + comment.comment + '(<span class="postTimeStamp" data-ts="' + comment.createdAt + '">' + timestampAgo + '</span>)</p>';
                
                $( mStreamId ).children('.postCommentContainer').append(html);

            }

        }
        //likes
        var toPrepend = _.likeText(obj);
        
        $( mS + _.postInt ).prepend(toPrepend);

        return $(mStreamId).fadeIn('fast'); 
    }
}; 
streamFactory.build();

var notificationFactory = {
    $appendTarget: $('#leftCol'),

    noNotification: function() {
        $appendTarget.append('<div>You have no notification.</div>');
    },
    build: function() {
        var notifications = renderJSON.notifications;


        if(notifications) {
            var notificationsCount = Object.keys(notifications).length;

            if(!(notificationsCount > 0)) {
                return this.noNotification();
            } else {


                for(i=0;i<notificationsCount;i++) {
                    var setterName = notifications[i].setter.userNameDisp,
                        html = '';

                    var html = '<div><a href="{p.absPath}/' + setterName + '">';
                        html += setterName + '</a> ';

                        if(notifications[i].type == 'like') {
                            html += 'likes';
                        }
                        if(notifications[i].type == 'comment') {
                            html += 'commented on';
                        }

                        html += ' your post (' + notifications[i].Post_postId.toString() + ')';

                    this.append(html);

                }//for loop

            }//if else

        }//if notifications
    },
    append: function(html) {
        this.$appendTarget.append(html);
    }
}
notificationFactory.build();
</script>
{:else}
<script>
$( '.streamLayout .description').html('No stream for you... follow some people!');
</script>

{/isStream}{/renderJSON}


{! ==================================================
    search, Profile

    user block factory
!}
{?renderJSON}{?isSearch}
<script>
$( document ).ready(function() {
    searchFactory = {

        mainBlock: '.mainColBlock',
        $mainBlock: $( '.mainColBlock' ),
        userBlock: '.blockUsername',
        joinedBlock: '.blockJoined',
        isFollowingYou: '.blockIsFollowingYou',
        followButton: '#followBtn',
        followBackButton: '#followBackBtn',
        unfollowButton: '#unfollowBtn',

        followButtonHTML: '',
        followBackButtonHTML: '',
        unfollowButtonHTML: '',

        //layoutHTML: $( '.mainColBlock' ).html(),

        initHTML: function(elem) {
            $( elem ).wrap('<div></div>');
            var html = $( elem ).parent('div').html();
            $( elem ).unwrap();
            return html;
        },
        objCount: function() {
            if( (typeof renderJSON != undefined) && renderJSON ) {

                return Object.keys(renderJSON).length;

            } else {
            
                return 0;
            }
        },
        noObj: function() {

            $( '.userLayout .blockUsername' ).html('User is invalid.');

        },
        build: function() {

            var _ = this;

            //initialise HTMLs
            _.followButtonHTML = _.initHTML(_.followButton);
            _.followBackButtonHTML = _.initHTML(_.followBackButton);
            _.unfollowButtonHTML = _.initHTML(_.unfollowButton);

            var objCount = _.objCount();

            if( objCount < 1 ) { 

                _.noObj();

            } else {
                var divId = 'layoutId';
                //append contents
                _.append(divId, renderJSON);


            }
        },
        append: function(divId, obj) {

            var _ = this,
                blockId = '#' + divId + ' ';

            $( blockId + _.userBlock ).html(obj.userNameDisp);
            $( blockId + _.joinedBlock ).html('Joined on ' + obj.joinedDateProfile);


            var followUnfollow = _.followUnfollow(blockId, obj);
            followUnfollow(blockId, this);

        },
        followUnfollow: function(blockId, obj) {

            // BOTH users not following each other
            if(!obj.isFollowing && !obj.isBeingFollowed) {

                return function(blockId, self) {
                    $( blockId + self.unfollowButton ).remove();
                    $( blockId + self.followBackButton ).remove();
                    $( blockId + self.followButton ).show();
                }

            }

            // ONLY visiting user is following profile user
            if(obj.isFollowing && !obj.isBeingFollowed) {

                return function(blockId, self) {
                    $( blockId + self.followButton ).remove();
                    $( blockId + self.followBackButton ).remove();
                    $( blockId + self.unfollowButton ).show();
                }

            }

            // ONLY profile user is following visiting user
            if(!obj.isFollowing && obj.isBeingFollowed) {

                return function(blockId, self) {
                    $( blockId + self.unfollowButton ).remove();
                    $( blockId + self.followButton ).remove();
                    $( blockId + self.followBackButton ).show();
                    $( blockId + self.isFollowingYou ).html('is following you.')
                }

            }

            // BOTH users are following each other
            if(obj.isFollowing && obj.isBeingFollowed) {

                return function(blockId, self) {
                    $( blockId + self.unfollowButton ).show();
                    $( blockId + self.followButton ).remove();
                    $( blockId + self.followBackButton ).remove();
                    $( blockId + self.isFollowingYou ).html('is following you.')
                }
                
            }

        }
    }; searchFactory.build();



    //Follow Button

    var followButton = Object.create(searchFactory);
    followButton.ajaxFollow = function(elem) {

        var buttonCont = $( elem ).closest('.blockFollowBtnCont'),
            action = $( elem ).attr('data-action'),
            userId = $( elem ).attr('data-userid');

            console.log(this.unfollowButtonHTML);
            console.log(this.followButtonHTML);
            console.log(this.followBackButtonHTML);

        if($( elem ).attr('data-action') == 'follow') {
            var theOtherButton = this.unfollowButtonHTML;
        }

        if($( elem ).attr('data-action') == 'unfollow') {

            if(!renderJSON.isBeingFollowed) {
                var theOtherButton = this.followButtonHTML;
            } else {
                var theOtherButton = this.followBackButtonHTML;
            }

        }
            

        var blink = {
            disabler: function(elem) {
                elem.attr('disabled','disabled');
            },
            blinker: function(elem) {
                var self = this;
                elem.fadeOut('fast', function() {
                    elem.fadeIn('fast', function() {
                        self.blinker(elem);
                    });
                });
            },
            run: function(elem) {
                this.disabler(elem);
                this.blinker(elem);
            }
            
        }

        //blink it.
        blink.run(elem);
     
        // Send the data using post
        var posting = $.post( "{p.absPath}/follow", { userId: userId, action: action } );
     
        
        //done
        posting.done(function( data ) {
            console.log(data);

            if(data.success) {
                console.log('success');

                buttonCont.html(theOtherButton);
                $(elem).stop().fadeOut('fast', function() {
                    $(elem).remove();
                    
                    buttonCont
                    .find('button')
                    .fadeIn('fast')
                    .click(function(event) {
                        event.preventDefault();
                        followButton.ajaxFollow($(this));
                    });
                });

            } else {

                $(elem).stop().fadeOut('fast').fadeIn('fast').removeAttr('disabled');

                if(data.msg) {
                    var alertMsg = data.msg;
                } else {
                    var alertMsg = 'Please either login or check your internet connection.';
                }

                console.log('error');
                alertFactory.protoAlert(alertMsg);
            }
            
        });


        //fail
        posting.fail(function() {
            $(elem).stop().fadeOut('fast').fadeIn('fast').removeAttr('disabled');
            alertFactory.protoAlert('Please either login or check your internet connection.');

        });
    };
    $( "button.followBtn" ).click(function(event) {
        event.preventDefault();
        followButton.ajaxFollow($(this));
    });
});
</script>
{/isSearch}{/renderJSON}


{! ==================================================
    Profile

    user post factory
!}
{?renderJSON}{?isProfile}
<script>
$( document ).ready(function() {
    var streamFactory = {

        mainStreamPrefix: '#mainStream_',
        mainBlock: '.mainColBlock',
        $mainBlock: $( '.mainColBlock' ),
        userBlock: '.blockUsername',
        tLBlock: '.blockTimelapse',
        desc: '.description',
        imageBlock: '.fancybox',
        layoutHTML: function() {
            $( '.mainColBlock .streamLayout' ).wrap('<div></div>');
            var html = $( '.streamLayout' ).parent('div').html();
            $( '.streamLayout' ).unwrap();
            return html;
        },
        mediaDir: '{p.mediaDir}',
        errorImg: '{p.img}/image404.jpg',

        objCount: function() {
            if( (typeof renderJSON != undefined) && renderJSON ) {

                //.posts
                return Object.keys(renderJSON.posts).length;

            } else {
            
                return 0;
            }
        },
        noObj: function() {

            $( '.streamLayout .description').html(renderJSON.userNameDisp + ' has no posts.');

        },
        build: function() {
            var _ = this,
                layoutHTML = _.layoutHTML();

            var objCount = _.objCount();

            if ( objCount < 1 ) { 

                _.noObj();

            } else {
                
                $( _.mainBlock + ' ' + '.streamLayout' ).remove();

                for( i=0; i<objCount; i++) {

                    //.posts
                    var obj = renderJSON.posts[i];
                    var mStreamId = _.mainStreamPrefix + obj.postId;

                    //create the block
                    _.$mainBlock.append(layoutHTML);
                    $( '.streamLayout#layoutId' ).attr('id', 'mainStream_' + obj.postId );

                    //append contents
                    _.append(mStreamId, obj);

                }
            }
        },
        append: function(mStreamId, obj) {
            var _ = this;

            $( mStreamId + ' ' + _.tLBlock ).html(obj.timeLapse);
            $( mStreamId + ' ' + _.desc ).html(obj.desc);


            //images
            var imgURL = '';

            imgURL = _.mediaDir + '/' + obj.postId + '.jpg';

            $.get(imgURL)
                .done(function() { 

                        $( mStreamId + ' ' + _.imageBlock )
                            .html('<img src="' + imgURL + '" alt="' + obj.desc + '">')
                            .attr('href', imgURL)
                            .attr('content', obj.desc);

                }).fail(function() { 

                        $( mStreamId + ' ' + _.imageBlock ).html('<img src="' + _.errorImg + '">');
                        $( mStreamId + ' ' + _.imageBlock + ' img').unwrap();

                });

            //comments
            var comments = obj.comments,
                commentCount = _.objCount(comments);

            if(commentCount > 0) {

                for(i=0; i<commentCount; i++) {

                    var comment = comments[i],
                        timestampAgo = moment(comment.createdAt).fromNow();

                    var html = '<p class="postComment">' + comment.user.userNameDisp + ': ' + comment.comment + '(<span class="postTimeStamp" data-ts="' + comment.createdAt + '">' + timestampAgo + '</span>)</p>';
                    
                    $( mStreamId ).children('.postCommentContainer').append(html);

                }

            }
        }
    }; streamFactory.build();
});
</script>
{/isProfile}{/renderJSON}
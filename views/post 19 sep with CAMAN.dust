{>blockHeader/}

<script src="{p.js}/exif.binaryjax.js"></script>
<script type="text/javascript" src="{p.js}/caman.full.min.js"></script>
<script src="{p.js}/socket.io.js"></script>
<script>
var socket = io.connect();
// var socket = io.connect('/post', {
//     // Disables the automatic reconnection
//     reconnect: false
// });
var socketId = '';

socket.on('welcome', function (data) {
    socketId = data.message;
});

// Reconnects on disconnection
socket.on('disconnect', function(){
    console.log("reconnecting to server....");
    //VERIFY
    socket.connect();
});

socket.on('uploadProgress', function(data){
    var percentage = data.bytesReceived/data.bytesExpected
    $('#progress').val(parseInt(percentage)*100+'%');
});
</script>



<section id="leftCol" class="col span2">
</section><!-- left_col -->

<section id="main" class="col span1">
    <div class="mainColBlock">
        <h1>Post</h1>

        {?isLoggedIn}

        <script src="{p.js}/vvImg.js"></script>
        <script>
        //Client Side Render
        {?CSRender}
        VV.img.CSRender = true;
        {:else}
        VV.img.CSRender = false;
        {/CSRender}
        </script>

        <style>
        #cropPortCont {
            width: 100%;
        }
            #cropPortBg {
                max-height: 0px;
                position: relative;
                top: 20px;
                width: 280px;
                margin: auto;
            }
             #cropPortBg img {
                display: block;
                margin: auto;
                position: relative;
                opacity: 0.4;
                filter: alpha(opacity=40);
                z-index: -1;
             }
            #cropPort {
                height:280px; 
                width:280px; 
                box-sizing:border-box; 
                border:2px dotted #e44447;
                margin: 20px auto;
                overflow: hidden;
            }
        img[id^=img_preview], canvas[id^=img_preview] {
            position:relative;
            z-index:-1;
            left:-2px;
            top:-2px;
        }
        #scaleSliderCont {
            width:280px;
            height: 50px;
            padding-top: 20px;
            display:none;
            margin:auto;
        }
            #scaleSlider {
                width: 100%;
                height: 2px;
                background-color: #ccc;
            }   
            #scaleSliderBut {
                background-color: #e74447;
                margin-top: -14px;
                margin-left: 10px;
                width: 50px;
                height: 25px;
                cursor: move;
            }
        </style>

        <div id="cropPortCont">
            <div id="cropPortBg"></div>
            <div id="cropPort"></div>
        </div>
        <div id="test1"></div><div id="test2"></div><div id="test3"></div>
        <script>$(document).ready(function() {
            //set the crop port
            var windowW = $(window).width();
            if(windowW > 640) {
                VV.img.CROP_PORT = 480;
                $("#cropPort").css('height', VV.img.CROP_PORT).css('width', VV.img.CROP_PORT);
                $("#cropPortBg").css('width', VV.img.CROP_PORT);
            }
        });
        </script>
        <div id="scaleSliderCont">
            <div id="scaleSlider"></div>
            <div id="scaleSliderBut"></div>
        </div>
        <div id="percent">0</div>
        Image: <input id="img_field" type="file" name="img" accepts="image/jpeg,image/gif,image/png" required></input>

    <p>
        Post: <textarea id="desc" name="desc" required></textarea>
    </p>
    <p>
        <button id="submit" type="button">Pre-submit</button>
        <button>Post</button>
    </p>
    <p>
        Progress: <input id="progress" name="progressPercent" required></input>
    </p>

        {:else}
            You are not logged in. To post, please log in <a href="{#p}{login}{/p}">here</a>
        {/isLoggedIn}
    </div>
    <!-- end your stream -->
</section><!-- main -->

{! Caman filters


 <div id="presetFilters" style="display:none;">
     Filters are for preview purposes at the moment.
   
     <button data-preset="vintage">Vintage</button>
   
     <button data-preset="lomo">Lomo</button>
   
     <button data-preset="clarity">Clarity</button>
   
     <button data-preset="sinCity">Sin City</button>
   
     <button data-preset="sunrise">Sunrise</button>
   
     <button data-preset="crossProcess">Cross Process</button>
   
     <button data-preset="orangePeel">Orange Peel</button>
   
     <button data-preset="love">Love</button>
   
     <button data-preset="grungy">Grungy</button>
   
     <button data-preset="jarques">Jarques</button>
   
     <button data-preset="pinhole">Pinhole</button>
   
     <button data-preset="oldBoot">Old Boot</button>
   
     <button data-preset="glowingSun">Glowing Sun</button>
   
     <button data-preset="hazyDays">Hazy Days</button>
   
     <button data-preset="herMajesty">Her Majesty</button>
   
     <button data-preset="nostalgia">Nostalgia</button>
   
     <button data-preset="hemingway">Hemingway</button>
   
     <button data-preset="concentrate">Concentrate</button>
   
   </div>

 <script>
 var blink = {
     disabler: function(elem) {
         elem.attr('disabled','disabled');
     },
     blinker: function(elem) {
         var self = this;
         elem.fadeOut('fast', function() {
             elem.fadeIn('fast', function() {
                 self.blinker(elem);
             });
         });
     },
     run: function(elem) {
         this.disabler(elem);
         this.blinker(elem);
     }
     
 }
 var block = false;

 $(document).ready(function() {
     //var previewCanvas = Caman("#img_preview");

     $('#presetFilters button').each(function() {

         $(this).click(function() {

             $('#presetFilters button').removeClass('selected');

             var self = $(this);

             if(block) {
                 return false;
             }

             block = true;

             blink.run($(this));

             var filter = $(this).data('preset');

             console.log(filter);

             Caman("#img_preview").revert(false);
             Caman("#img_preview")[filter]().render(function() {
                 block = false;
                 self.stop().fadeOut('fast').fadeIn('fast').removeAttr('disabled');
                 self.addClass('selected');
             });

         });
     });
 });
 </script> 

 <script>
 var v = Caman;
 v.Filter.register("vintage", function(F) {
     if (F == null) {
         F = true
     }
     this.greyscale();
     this.contrast(5);
     this.noise(3);
     this.sepia(100);
     this.channels({
         red: 8,
         blue: 2,
         green: 4
     });
     this.gamma(0.87);
     if (F) {
         return this.vignette("40%", 30)
     }
 });
 v.Filter.register("lomo", function(F) {
     if (F == null) {
         F = true
     }
     this.brightness(15);
     this.exposure(15);
     this.curves("rgb", [0, 0], [200, 0], [155, 255], [255, 255]);
     this.saturation(-20);
     this.gamma(1.8);
     if (F) {
         this.vignette("50%", 60)
     }
     return this.brightness(5)
 });
 v.Filter.register("clarity", function(F) {
     if (F == null) {
         F = false
     }
     this.vibrance(20);
     this.curves("rgb", [5, 0], [130, 150], [190, 220], [250, 255]);
     this.sharpen(15);
     this.vignette("45%", 20);
     if (F) {
         this.greyscale();
         this.contrast(4)
     }
     return this
 });
 v.Filter.register("sinCity", function() {
     this.contrast(100);
     this.brightness(15);
     this.exposure(10);
     this.posterize(80);
     this.clip(30);
     return this.greyscale()
 });
 v.Filter.register("sunrise", function() {
     this.exposure(3.5);
     this.saturation(-5);
     this.vibrance(50);
     this.sepia(60);
     this.colorize("#e87b22", 10);
     this.channels({
         red: 8,
         blue: 8
     });
     this.contrast(5);
     this.gamma(1.2);
     return this.vignette("55%", 25)
 });
 v.Filter.register("crossProcess", function() {
     this.exposure(5);
     this.colorize("#e87b22", 4);
     this.sepia(20);
     this.channels({
         blue: 8,
         red: 3
     });
     this.curves("b", [0, 0], [100, 150], [180, 180], [255, 255]);
     this.contrast(15);
     this.vibrance(75);
     return this.gamma(1.6)
 });
 v.Filter.register("orangePeel", function() {
     this.curves("rgb", [0, 0], [100, 50], [140, 200], [255, 255]);
     this.vibrance(-30);
     this.saturation(-30);
     this.colorize("#ff9000", 30);
     this.contrast(-5);
     return this.gamma(1.4)
 });
 v.Filter.register("love", function() {
     this.brightness(5);
     this.exposure(8);
     this.contrast(4);
     this.colorize("#c42007", 30);
     this.vibrance(50);
     return this.gamma(1.3)
 });
 v.Filter.register("grungy", function() {
     this.gamma(1.5);
     this.clip(25);
     this.saturation(-60);
     this.contrast(5);
     this.noise(5);
     return this.vignette("50%", 30)
 });
 v.Filter.register("jarques", function() {
     this.saturation(-35);
     this.curves("b", [20, 0], [90, 120], [186, 144], [255, 230]);
     this.curves("r", [0, 0], [144, 90], [138, 120], [255, 255]);
     this.curves("g", [10, 0], [115, 105], [148, 100], [255, 248]);
     this.curves("rgb", [0, 0], [120, 100], [128, 140], [255, 255]);
     return this.sharpen(20)
 });
 v.Filter.register("pinhole", function() {
     this.greyscale();
     this.sepia(10);
     this.exposure(10);
     this.contrast(15);
     return this.vignette("60%", 35)
 });
 v.Filter.register("oldBoot", function() {
     this.saturation(-20);
     this.vibrance(-50);
     this.gamma(1.1);
     this.sepia(30);
     this.channels({
         red: -10,
         blue: 5
     });
     this.curves("rgb", [0, 0], [80, 50], [128, 230], [255, 255]);
     return this.vignette("60%", 30)
 });
 v.Filter.register("glowingSun", function(F) {
     if (F == null) {
         F = true
     }
     this.brightness(10);
     this.newLayer(function() {
         this.setBlendingMode("multiply");
         this.opacity(80);
         this.copyParent();
         this.filter.gamma(0.8);
         this.filter.contrast(50);
         return this.filter.exposure(10)
     });
     this.newLayer(function() {
         this.setBlendingMode("softLight");
         this.opacity(80);
         return this.fillColor("#f49600")
     });
     this.exposure(20);
     this.gamma(0.8);
     if (F) {
         return this.vignette("45%", 20)
     }
 });
 v.Filter.register("hazyDays", function() {
     this.gamma(1.2);
     this.newLayer(function() {
         this.setBlendingMode("overlay");
         this.opacity(60);
         this.copyParent();
         this.filter.channels({
             red: 5
         });
         return this.filter.stackBlur(15)
     });
     this.newLayer(function() {
         this.setBlendingMode("addition");
         this.opacity(40);
         return this.fillColor("#6899ba")
     });
     this.newLayer(function() {
         this.setBlendingMode("multiply");
         this.opacity(35);
         this.copyParent();
         this.filter.brightness(40);
         this.filter.vibrance(40);
         this.filter.exposure(30);
         this.filter.contrast(15);
         this.filter.curves("r", [0, 40], [128, 128], [128, 128], [255, 215]);
         this.filter.curves("g", [0, 40], [128, 128], [128, 128], [255, 215]);
         this.filter.curves("b", [0, 40], [128, 128], [128, 128], [255, 215]);
         return this.filter.stackBlur(5)
     });
     this.curves("r", [20, 0], [128, 158], [128, 128], [235, 255]);
     this.curves("g", [20, 0], [128, 128], [128, 128], [235, 255]);
     this.curves("b", [20, 0], [128, 108], [128, 128], [235, 255]);
     return this.vignette("45%", 20)
 });
 v.Filter.register("herMajesty", function() {
     this.brightness(40);
     this.colorize("#ea1c5d", 10);
     this.curves("b", [0, 10], [128, 180], [190, 190], [255, 255]);
     this.newLayer(function() {
         this.setBlendingMode("overlay");
         this.opacity(50);
         this.copyParent();
         this.filter.gamma(0.7);
         return this.newLayer(function() {
             this.setBlendingMode("normal");
             this.opacity(60);
             return this.fillColor("#ea1c5d")
         })
     });
     this.newLayer(function() {
         this.setBlendingMode("multiply");
         this.opacity(60);
         this.copyParent();
         this.filter.saturation(50);
         this.filter.hue(90);
         return this.filter.contrast(10)
     });
     this.gamma(1.4);
     this.vibrance(-30);
     this.newLayer(function() {
         this.opacity(10);
         return this.fillColor("#e5f0ff")
     });
     return this
 });
 v.Filter.register("nostalgia", function() {
     this.saturation(20);
     this.gamma(1.4);
     this.greyscale();
     this.contrast(5);
     this.sepia(100);
     this.channels({
         red: 8,
         blue: 2,
         green: 4
     });
     this.gamma(0.8);
     this.contrast(5);
     this.exposure(10);
     this.newLayer(function() {
         this.setBlendingMode("overlay");
         this.copyParent();
         this.opacity(55);
         return this.filter.stackBlur(10)
     });
     return this.vignette("50%", 30)
 });
 v.Filter.register("hemingway", function() {
     this.greyscale();
     this.contrast(10);
     this.gamma(0.9);
     this.newLayer(function() {
         this.setBlendingMode("multiply");
         this.opacity(40);
         this.copyParent();
         this.filter.exposure(15);
         this.filter.contrast(15);
         return this.filter.channels({
             green: 10,
             red: 5
         })
     });
     this.sepia(30);
     this.curves("rgb", [0, 10], [120, 90], [180, 200], [235, 255]);
     this.channels({
         red: 5,
         green: -2
     });
     return this.exposure(15)
 });
 v.Filter.register("concentrate", function() {
     this.sharpen(40);
     this.saturation(-50);
     this.channels({
         red: 3
     });
     this.newLayer(function() {
         this.setBlendingMode("multiply");
         this.opacity(80);
         this.copyParent();
         this.filter.sharpen(5);
         this.filter.contrast(50);
         this.filter.exposure(10);
         return this.filter.channels({
             blue: 5
         })
     });
     return this.brightness(10)
 });


 </script>

!}

{>blockFooter/}

<script>
/*****************
* Drag scrolling *
*****************/
var startX, startY, endX, endY, minX, minY, maxX, maxY;
function shifter($el) {
    VV.img.IMG_X += endX - startX;
    VV.img.IMG_Y += endY - startY;
    // Update image position based on Boundary
    if (VV.img.IMG_X < minX) {
        VV.img.IMG_X = minX;
    } else if (VV.img.IMG_X > maxX) {
        VV.img.IMG_X = maxX;
    }
    if (VV.img.IMG_Y < minY) {
        VV.img.IMG_Y = minY;
    } else if (VV.img.IMG_Y > maxY) {
        VV.img.IMG_Y = maxY;
    }
    // Reset starting offsets
    startX = endX; startY = endY;
    // Render image
    $el.css({
        'margin-top': VV.img.IMG_Y.toString() + "px",
        'margin-left': VV.img.IMG_X.toString() + "px"
    });  
    $('#cropPortBg img').css({
        'top': VV.img.IMG_Y.toString() + "px",
        'left': VV.img.IMG_X.toString() + "px"
    });  
}
// Bind drag event to mousedown/touchdown at image container
$('#cropPort').on("mousedown.vv touchstart.vv",function(e){
    //console.log("Mousedown Event");
    var $img_preview = $('#img_preview');

    if($img_preview.length === 0) { return false; }
    if (e.button === 0 || e.type === "touchstart") {
        //e.stopPropagation(); e.preventDefault();

        if (e.type==="touchstart") {
            if(e.originalEvent.touches.length === 2) {
                return false;
            }
            e=e.originalEvent.touches[0]||e.originalEvent.changedTouches[0];
        }

        startX = e.pageX;
        startY = e.pageY;

        var imgW = $img_preview.width(),
            imgH = $img_preview.height();
            
        minX = VV.img.CROP_PORT - imgW;
        minY = VV.img.CROP_PORT - imgH;
        maxX = 0;
        maxY = 0;

        $('#cropPort').on("mousemove.vv touchmove.vv",function(e){
            //console.log('mousemove');
            e.stopPropagation(); e.preventDefault();

            if (e.type=="touchmove") e=e.originalEvent.touches[0]||e.originalEvent.changedTouches[0];

            endX = e.pageX;
            endY = e.pageY;
            return shifter($img_preview);
        });
    }

});

// Unbind drag event to mouseup/touchend at window
$(window).on("mouseup touchend",function(){
    console.log("Mouseup Event");
    $('#cropPort').unbind("mousemove.vv touchmove.vv");
});

/*******************
* Slider *
*******************/

var scaleSlider = {}

scaleSlider.lengthOf = 280;
scaleSlider.stopLimits = 10; //10px on each side.
scaleSlider.buttonWidth = 0;
scaleSlider.travel = 0;
scaleSlider.currentPosit = 0;
scaleSlider.percent = function() { return scaleSlider.currentPosit / scaleSlider.travel; }
scaleSlider.startX = 0;

scaleSlider.reset = function($el) {
    scaleSlider.currentPosit = 0;
    $el.css('margin-left', scaleSlider.stopLimits + 'px');
}

scaleSlider.init = function($el) {
    scaleSlider.buttonWidth = $el.width();
    scaleSlider.travel = scaleSlider.lengthOf - (2 * scaleSlider.stopLimits) - scaleSlider.buttonWidth;

    $(window).on("mouseup.sl touchend.sl", function(e) {
        console.log("mouseup event");
        $(window).unbind("mousemove.sl touchmove.sl");
    })

    $el.on("mousedown.sl touchstart.sl",function(e){
        if($('#img_preview').length === 0) { return false; }
        if (e.button === 0 || e.type === "touchstart") {
            e.stopPropagation(); e.preventDefault();
            if (e.type==="touchstart") e=e.originalEvent.touches[0]||e.originalEvent.changedTouches[0];
 
            scaleSlider.startX = e.pageX;

            $(window).on("mousemove.sl touchmove.sl", function(e){

                console.log('mousemove');
                if (e.type=="touchmove") e=e.originalEvent.touches[0]||e.originalEvent.changedTouches[0];
                endX = e.pageX;
                var moveX = endX - scaleSlider.startX;
                var currentX = scaleSlider.currentPosit;
                var transientX = currentX + moveX;
                var minX = 0;
                var maxX = scaleSlider.travel;

                if(transientX <= minX) {
                   var currentX = minX;
                } else if(transientX >= maxX) {
                   var currentX = maxX;
                } else {
                   var currentX = transientX;
                }
                //update
                scaleSlider.currentPosit = currentX;
                var margin = currentX + scaleSlider.stopLimits;
                $el.css('margin-left', margin + 'px');
                var scale = scaleSlider.percent() + 1;
                VV.img.scaler(scale, $('#img_preview'), $('#cropPortBg img'));
                // Reset starting offsets
                scaleSlider.startX = endX;
            });
        }
    });
}
scaleSlider.init($('#scaleSliderBut'));

scaleSlider.pinch = {}
scaleSlider.pinch.sensitivity = 0.6;
scaleSlider.pinch.init = function(el) {

    var oScale = 0;

    pinchCropPort = new Hammer(el);
    pinchCropPort.get('pinch').set({ enable: true });

    pinchCropPort.on('pinchstart', function(e) {
        oScale = e.scale;
    });

    pinchCropPort.on('pinchmove', function(e) {
        var newScale = e.scale;
        var delScale = newScale - oScale;
        delScale = delScale * VV.img.CROP_PORT * scaleSlider.pinch.sensitivity;
        //$('#desc').val(newScale.toString() + ' ' + oScale.toString() + ' ' + delScale.toString());
        $('#desc').val(delScale);
        var currentX = scaleSlider.currentPosit;
        var transientX = currentX + delScale;
        var minX = 0;
        var maxX = scaleSlider.travel;

        if(transientX <= minX) {
           var currentX = minX;
        } else if(transientX >= maxX) {
           var currentX = maxX;
        } else {
           var currentX = transientX;
        }
        scaleSlider.currentPosit = currentX;
        var scale = scaleSlider.percent() + 1;
        var margin = currentX + scaleSlider.stopLimits;
        $('#scaleSliderBut').css('margin-left', margin + 'px');
        VV.img.scaler(scale, $('#img_preview'), $('#cropPortBg img'));
        oScale = newScale;  
    });
}
scaleSlider.pinch.init(document.getElementById('cropPort'));

/*******************
* Image processing *
*******************/

/* Functional schema
    
    $("#img_field").change()
        !--> reader.readAsDataURL()
                !--> reader.onload()
                        !--> VV.img.STOCK_IMG.onload()
                                !--> ends.
*/

var $img_field = $('img_field');
var el_img_field = document.getElementById('img_field');

function loader($el) {
    var loading = '<div id="loading">Loading...</div>';
    $el.append(loading);
    $('#loading').velocity("fadeIn", {
        duration: 500, loop: true });
}

VV.img.STOCK_IMG.onload = function() {
    var self = this;
    console.log('img onload');

    //480x480
    if(this.height < 480 || this.width < 480 ) {
        return aF.protoAlert({
                text:'Please select an image with at least 480px by 480px resolution', 
                title:'Resolution too small'
        });
    }
    var resTooHigh = {
        text:'Your image resolution is too high. Please resize before uploading.', 
        title:'Resolution too high'
    }
    //<5120px
    if(this.height > this.width) {
        if(this.width > 5120) { return aF.protoAlert(resTooHigh); }
    } else {
        if(this.height > 5120) { return aF.protoAlert(resTooHigh); }
    }
    //<23megapixel
    if(this.height * this.width > 23000000) { return aF.protoAlert(resTooHigh); }

    //store the heights for use later.
    VV.img.STOCK_IMG_W = this.width;
    VV.img.STOCK_IMG_H = this.height;
    $("#cropPort").css('cursor', 'move');

    if(VV.img.CSRender) {
        //get EXIF first before resizing
        return VV.img.getEXIF(el_img_field.files[0], function(toRotate) {

            var canvas = VV.img.canvasrise(self);

            var scaleTo = VV.img.CROP_SIZE*VV.img.SCALE_LIMIT;
            //resize and rotate
            VV.img.canvasResize(canvas, scaleTo, toRotate, function(canvas) {
                VV.img.dispTmp('canvas', canvas);  
            });  

        });
    } else {
        var attrs = {
            action: 'raw',
            imgData: el_img_field.files[0],
            processData: false
        }
        return VV.img.upload(attrs, function(data) {
            VV.img.dispTmp('imgData', data.pathToImg);
        }); //VV.img.upload;
    }    
} //img onload

var reader = new FileReader();
reader.onload = function(e) {
    VV.img.STOCK_IMG.src = e.target.result;
}

//File Input onchange
$("#img_field").change(function(){
    var self = this;
    console.log("New file");

    //STEP 1: Rejection or accept */
    if(!this.files && !this.files[0]) {
        return false;
    }

    console.log(this.files[0].size);

    if( this.files[0].size > 3145728 ) {
        return aF.protoAlert({
                text:'Your image file is too large. Please resize your image to below 3mb.', 
                title:'Max filesize exceeded.'
            });
    }

    //objectURL method not supported by Firefox
    //var objectURL = URL.createObjectURL(this.files[0]);

    if($('#img_preview').length > 0) {
        $('#cropPortBg img').velocity("fadeOut", { 
            duration: 300,
            complete: function(el) { 
                $(el).remove(); 
            }
        });
        $('#img_preview').velocity("fadeOut", {
            duration: 300,
            complete: function(el) {
                $(el).remove();
                loader($('#cropPort'));
                reader.readAsDataURL(self.files[0]);
                //VV.img.STOCK_IMG.src = objectURL;
            }
        });

{!
        $('#cropPortBg img').fadeOut('fast', function() {
            $(this).remove();
        });
        $('#img_preview').fadeOut('fast', function() {
            $(this).remove();
            loader($('#cropPort'));
            reader.readAsDataURL(self.files[0]);
            
            //VV.img.STOCK_IMG.src = objectURL;
        });
!}
    } else {
        loader($('#cropPort'));
        reader.readAsDataURL(this.files[0]);
        
        //VV.img.STOCK_IMG.src = objectURL;
    }
    //reset all globals
    VV.img.resetGlobal();
    scaleSlider.reset($("scaleSliderBut"));
});

/******************
* Post processing *
******************/

$("#submit").click(function(){

    if(VV.img.CSRender) {
        var submittedCanvas = document.getElementById('img_preview');
        var tempCanvas = VV.img.cloneCanvas(submittedCanvas);
        VV.img.canvasResize(tempCanvas, VV.img.CROP_SIZE*VV.img.SCALE, false, function(canvas) {

            VV.img.canvasCrop('canvas', canvas, function(data) {
                var blobBin = atob( data.split(',')[1] );
                var array = [];
                for(var i = 0; i < blobBin.length; i++) {
                    array.push(blobBin.charCodeAt(i));
                }
                var file = new Blob([new Uint8Array(array)], {type: 'image/jpeg'});

                var attrs = {
                    action: 'store',
                    imgData: file,
                    processData: false,
                    desc: $('#desc').val()
                }

                VV.img.upload(attrs, function(data) {
                    //redirect to post
                    window.location.href = '/';
                    console.log(data.postId);
                });
            });
        });

    } else {

        var processData = {
            crop: {
                x: VV.img.IMG_X,
                y: VV.img.IMG_Y,
                scale: VV.img.SCALE,
                cp: VV.img.CROP_PORT
            }
        }
        console.log(processData);

        var attrs = {
            action: 'process',
            imgData: VV.img.TEMP_IMG.src,
            processData: processData,
            desc: $('#desc').val()
        }

        VV.img.upload(attrs, function(data) {
            //window.location.href = '/';
            console.log(data.postId);
        });


    }




{!
    Caman('#img_preview', function() {

        var m = 2;
        this.crop(640, 640, -IMG_X*m, -IMG_Y*m); // width, height, x, y

        this.render(function() {
            var $img_preview = $('#img_preview');
            $img_preview.css({'width':'320px','height':'320px'});
            var imgData = document.getElementById('img_preview').toDataURL();
            window.open(imgData, "toDataURL() image", "width=640, height=640");
            // AJAX Post...
        });

    });  // caman 
!}    
     
}); //submit onclick
</script>

{>blockFooterScripts/}
